import java.util.ArrayList;
import java.util.Collections;

public class Main {
    public static int y=0;
    public static int x=0;
    public static int y2=0;//target
    public static int x2=3;
    public static int n=4;
    public static int ystart=y;
    public static int xstart=x;
    public static int done=0;
   public static int explored[][];
    public static int reachable[][];
    public static int prevstep[][][];
    public static int field [][]; //only obstacles as -1
    public static int cost [][];

    static{
        reachable =new int [n][n];
        explored =new int [n][n];
        prevstep =new int [n][n][2];
        field =new int [n][n];
        cost =new int [n][n];
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                cost[i][j]=999999999;
                for (int k = 0; k < 2; k++){
                    prevstep[i][j][k] = -1;}}}
        reachable[y][x]=1;//start
        cost [y][x]=0;
        prevstep[y][x][0]=-2;
        prevstep[y][x][1]=-2;
        //-1 for obstacle add to field
     field[0][1]=-1;
      field[1][1]=-1;
      field[2][1]=-1;
  //   field[3][1]=-1;


    //    field[0][3]=-1;
        field[1][3]=-1;
        field[2][3]=-1;
       field[3][3]=-1;


    }

    public static void go(){

        int firstreach[]= {-1,-1};
        ArrayList<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++){//all reachable cells
            for (int j = 0; j < n; j++){
             if (reachable [i][j]>0&&explored[i][j]<1){
                 firstreach[0]= i; firstreach[1]= j;
                 list.add(cost[i][j]);
          //       System.out.print("y:"+i+" x:"+j+" cost:"+cost[i][j]+" ");
             }
            }
        }
        Collections.sort(list);
        int min=-1;
if (list.size()>0){
        min =  list.get(0);}

   //    System.out.println(" min:"+min+ "_");

        for (int i = 0; i < n; i++){//all reachable cells
            for (int j = 0; j < n; j++){
                if (reachable [i][j]>0&&explored[i][j]<1&&cost[i][j]==min){
                    firstreach[0]= i; firstreach[1]= j;
                }}}

        if (firstreach[0]>-1&&firstreach[1]>-1){
            y=firstreach[0]; x=firstreach[1];
//if (x==xstart&&y==ystart){System.out.print("Starting ");}
       //     System.out.println("reachable cell exist");

        int  l,r,u,d;
        l=r=u=d=-1;//end of field
        try { l=field[y][x-1];} catch (Exception e){}
        try { r=field[y][x+1];} catch (Exception e){}
        try { u=field[y-1][x];} catch (Exception e){}
        try { d=field[y+1][x];} catch (Exception e){}
    //    System.out.println("l:"+l+" r:"+r+" u:"+u+" d:"+d);
        int lrudsum = l+r+u+d;

        if (lrudsum!=-4){
            if (l==0){
                if (explored [y][x-1]<1){
                if (cost [y][x-1]>cost [y][x]+1){
                    cost [y][x-1]=cost [y][x]+1;
                    prevstep[y][x-1][0] =y;
                    prevstep[y][x-1][1] =x;
                    reachable [y][x-1]=1;
                }
                if (y==y2&&x-1==x2){done=1;}
            }}
            if (r==0){
                if (explored [y][x+1]<1){

                    if (cost [y][x+1]>cost [y][x]+1){cost [y][x+1]=cost [y][x]+1;
                        prevstep[y][x+1][0] =y;
                        prevstep[y][x+1][1] =x;
                        reachable [y][x+1]=1;}
                if (y==y2&&x+1==x2){done=1;}
            }}
            if (u==0){
                if (explored [y-1][x]<1){
                    if (cost [y-1][x]>cost [y][x]+1){cost [y-1][x]=cost [y][x]+1;
                        prevstep[y-1][x][0] =y;
                        prevstep[y-1][x][1] =x;
                        reachable [y-1][x]=1;}
                if (y-1==y2&&x==x2){done=1;}
            }}
            if (d==0){
                if (explored [y+1][x]<1){
            if (cost [y+1][x]>cost [y][x]+1){cost [y+1][x]=cost [y][x]+1;
                prevstep[y+1][x][0] =y;
                prevstep[y+1][x][1] =x;
                reachable [y+1][x]=1;}
                if (y+1==y2&&x==x2){done=1;}
            }}
            reachable [y][x]=0;
            explored [y][x]=1;
        }
        else{
            reachable [y][x]=0;
            explored [y][x]=1;
         //   System.out.println(lrudsum+" nowhere to move from this cell");//but maybe another cells will work
        }
               go();
        }//
        else//all accessible cell ended
        {
            fin();
        }
    }

    public static void fin(){
        System.out.println("Fin:");

        if (done>0) {
            System.out.println("done");
//
            System.out.println("Shortest back way to start (Dijkstra)");
            System.out.println(y2 + " " + x2);
            int    ypre,xpre,ypre2,xpre2;
            ypre = xpre = ypre2=xpre2=-1;
            ypre =        prevstep[y2][x2][0];
            xpre =        prevstep[y2][x2][1];

            while (true){
                if (ypre==-2){break;}
                System.out.println(ypre + " " + xpre);
                ypre2 = prevstep[ypre][xpre][0];
                xpre2 = prevstep[ypre][xpre][1];
                ypre = ypre2;
                xpre = xpre2;
            }
//
        }
        else
        {
            System.out.println("Reachable cell absent");
        }
        System.out.println("Start (yx): "+ystart+"_"+xstart+"   Finish: "+y2+"_"+x2);
      bigout();
    }

    public static void bigout(){
        //big out start====================================================================
        //field out start
        System.out.println("Obstacles (-1) field table:");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                if (field[i][j]>-1){System.out.print(" ");}
                System.out.print(field [i][j]+" ");
            }
            System.out.println();
        }
//field out end
// prevstep out start
        System.out.println("Prestep table:");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                System.out.print("(");
                for (int k = 0; k < 2; k++){
                    if (prevstep[i][j][k]>-1){System.out.print(" ");}
                    System.out.print(prevstep[i][j][k] + "");
                    System.out.print(" ");
                }
                System.out.print(")");
            }
            System.out.println();
        }
        //prevstep out end
        //Reachable out start
        System.out.println("Reachable table:");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                System.out.print(reachable [i][j]+" ");
            }
            System.out.println();
        }
//Reachable out end
        //explored out start
        System.out.println("Explored table:");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                System.out.print(explored [i][j]+" ");
            }
            System.out.println();
        }
//explored out end
        //explored out start
        System.out.println("Cost table:");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                if (cost [i][j]==999999999){System.out.print("z ");}else{
                System.out.print(cost [i][j]+" ");}
            }
            System.out.println();
        }
//explored out end
        System.out.println("___");
//big out end ============================================================================

    }

    public static void expltableshow(){
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                System.out.print(explored [i][j]+" ");
            }
            System.out.println();
        }
        System.out.println("___");
    }

    public static void main(String[] args) {go();}
}